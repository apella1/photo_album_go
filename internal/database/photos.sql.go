// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: photos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO
    photos (
        id,
        created_at,
        updated_at,
        title,
        body,
        album_id,
        user_id,
        img_url
    )
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, title, body, album_id, user_id, img_url
`

type CreatePhotoParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Body      []byte
	AlbumID   uuid.UUID
	UserID    uuid.UUID
	ImgUrl    string
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRowContext(ctx, createPhoto,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Body,
		arg.AlbumID,
		arg.UserID,
		arg.ImgUrl,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
		&i.AlbumID,
		&i.UserID,
		&i.ImgUrl,
	)
	return i, err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE FROM photos
WHERE id = $1
AND album_id = $2
AND user_id = $3
`

type DeletePhotoParams struct {
	ID      uuid.UUID
	AlbumID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) DeletePhoto(ctx context.Context, arg DeletePhotoParams) error {
	_, err := q.db.ExecContext(ctx, deletePhoto, arg.ID, arg.AlbumID, arg.UserID)
	return err
}

const fetchAlbumPhotos = `-- name: FetchAlbumPhotos :many
SELECT id, created_at, updated_at, title, body, album_id, user_id, img_url FROM photos WHERE album_id = $1
`

func (q *Queries) FetchAlbumPhotos(ctx context.Context, albumID uuid.UUID) ([]Photo, error) {
	rows, err := q.db.QueryContext(ctx, fetchAlbumPhotos, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photo
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Body,
			&i.AlbumID,
			&i.UserID,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchPhoto = `-- name: FetchPhoto :one
SELECT id, created_at, updated_at, title, body, album_id, user_id, img_url FROM photos WHERE id = $1
`

func (q *Queries) FetchPhoto(ctx context.Context, id uuid.UUID) (Photo, error) {
	row := q.db.QueryRowContext(ctx, fetchPhoto, id)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
		&i.AlbumID,
		&i.UserID,
		&i.ImgUrl,
	)
	return i, err
}

const getAllPhotos = `-- name: GetAllPhotos :many
SELECT id, created_at, updated_at, title, body, album_id, user_id, img_url FROM photos
`

func (q *Queries) GetAllPhotos(ctx context.Context) ([]Photo, error) {
	rows, err := q.db.QueryContext(ctx, getAllPhotos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photo
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Body,
			&i.AlbumID,
			&i.UserID,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePhotoTitle = `-- name: UpdatePhotoTitle :exec
UPDATE photos
SET title = $1
WHERE id = $2 AND user_id = $3
`

type UpdatePhotoTitleParams struct {
	Title  string
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UpdatePhotoTitle(ctx context.Context, arg UpdatePhotoTitleParams) error {
	_, err := q.db.ExecContext(ctx, updatePhotoTitle, arg.Title, arg.ID, arg.UserID)
	return err
}
